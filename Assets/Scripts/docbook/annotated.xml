<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_annotated" xml:lang="en-US">
<title>Class List</title>
Here are the classes, structs, unions and interfaces with brief descriptions:<link linkend="_class_a_r_u_i">ARUI</link>
<para>The <link linkend="_class_a_r_u_i">ARUI</link> MonoBehaviour manages user interface interactions specific to the AR experience. In particular, it handles the functionality of the Map button, allowing users to exit the AR scene and return to the main map or overview. This script demonstrates how to connect UI elements to application logic, enabling seamless transitions between AR and non-AR views in tourism or navigation apps </para>
<link linkend="_class_camera_manager">CameraManager</link>
<para>The <link linkend="_class_camera_manager">CameraManager</link> MonoBehaviour is responsible for dynamically positioning and orienting the main camera in relation to the CesiumGlobeAnchor. This script ensures that the camera maintains a consistent height above the anchor&apos;s position and is oriented to look directly down at the anchor. Such functionality is essential in AR and mapping applications where the camera must follow or focus on a specific geospatial location, providing users with an intuitive and context-aware view of the virtual environment </para>
<link linkend="_class_game_manager">GameManager</link>
<para>Singleton MonoBehaviour that acts as the central controller for the application&apos;s global state and logic. It manages references to key components such as the CesiumGlobeAnchor (for geospatial AR placement), the current GPS coordinates, the collection of places of interest, and UI elements. The <link linkend="_class_game_manager">GameManager</link> is responsible for orchestrating proximity checks between the user&apos;s location and stored places, updating UI elements, handling scene transitions, and synchronizing geocoded data. This class demonstrates best practices for centralized state management in Unity-based AR tourism applications, enabling modularity and scalability </para>
<link linkend="_class_geocode_address">GeocodeAddress</link>
<para>This MonoBehaviour provides geocoding functionality, allowing the application to convert a human-readable address string into precise geographic coordinates (latitude and longitude) using the OpenStreetMap Nominatim API. It is designed to be used both at runtime and in the Unity Editor for data entry and validation. The script demonstrates how to perform asynchronous web requests, parse JSON responses, and integrate third-party geocoding services into Unity </para>
<link linkend="_class_geocode_address_1_1_geocode_result">GeocodeAddress.GeocodeResult</link>
<para>Represents a single geocoding result returned by the Nominatim API. Each result contains latitude and longitude as strings, which are parsed into floats for use in the application </para>
<link linkend="_class_g_p_s_location">GPSLocation</link>
<para>This MonoBehaviour is responsible for accessing the device&apos;s GPS hardware and retrieving the current geographic coordinates (latitude and longitude). It requests location permissions at runtime (especially on Android), starts the location service, and continuously updates the coordinates. The script also synchronizes the retrieved GPS data with the <link linkend="_class_game_manager">GameManager</link>, enabling location-based logic such as proximity detection and AR content placement. This component is essential for any AR application that relies on real-world positioning, such as tourism guides or location-based games </para>
<link linkend="_class_place_ofinterest">PlaceOfinterest</link>
<para>A serializable data class that encapsulates all relevant information about a single place of interest. This class is intended to represent real-world locations in AR tourism or mapping applications, providing both geospatial coordinates and descriptive metadata for each location. Each instance can be stored in a &quot;PlacesOfinterest&quot; ScriptableObject and referenced at runtime </para>
<link linkend="_class_places_ofinterest">PlacesOfinterest</link>
<para>A Unity ScriptableObject that serves as a persistent data container for a collection of places of interest. This class is designed to be used as a centralized database for storing and managing multiple &quot;PlaceOfinterest&quot; entries, which represent real-world locations with associated metadata such as name, description, address, coordinates, and an icon. The ScriptableObject can be edited in the Unity Editor and referenced by other scripts at runtime, enabling efficient data-driven workflows for location-based AR or tourism applications </para>
<link linkend="_class_places_ofinterest_editor">PlacesOfinterestEditor</link>
<para>Custom Unity Editor inspector for the &quot;PlacesOfinterest&quot; ScriptableObject. This editor extension provides a user-friendly interface within the Unity Editor for managing a collection of places of interest. It allows designers and developers to add, edit, remove, and search for places directly from the Inspector window. The editor supports editing all properties of each place, including name, description, address, latitude, longitude, height, and an associated icon. This tool streamlines the workflow for content creation and data management in location-based AR applications </para>
<link linkend="_class_serialization_wrapper-1-g">SerializationWrapper&lt; T &gt;</link><link linkend="_class_vuforia_manager">VuforiaManager</link>
<para>This MonoBehaviour manages the interaction between Vuforia image targets and the application&apos;s UI. It listens for Vuforia target detection and loss events, and controls the visibility of a UI panel that displays information about the detected target. The script demonstrates how to bridge AR tracking events with user interface elements, which is a common requirement in AR tourism and educational apps </para>
<link linkend="_class_vuforia_target_events">VuforiaTargetEvents</link>
<para>This MonoBehaviour acts as an event dispatcher for Vuforia target status changes. It listens for changes in the tracking status of Vuforia ObserverBehaviours (such as Image Targets or Model Targets) and exposes these changes as C# events that other scripts can subscribe to. This enables decoupled and modular handling of AR target detection, loss, and updates, which is essential for building interactive AR experiences where UI or logic must respond to target visibility </para>
</section>
